// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/swag"
)

// Match match
// swagger:model Match
type Match struct {

	// The match id which is the collection + "/" + the key
	ID string `json:"_id,omitempty"`

	// The match key
	Key string `json:"_key,omitempty"`

	// The position of the blue users.Not used in 1:1.
	BlueAttack []string `json:"blue_attack"`

	// The position of the blue user playing in defense. This is used when playing 1:1.
	BlueDefense []string `json:"blue_defense"`

	// Was the game completed.
	Completed bool `json:"completed,omitempty"`

	// the datetime when the match ends
	EndTime string `json:"end_time,omitempty"`

	// The position of the players
	Lobby []string `json:"lobby"`

	// The maximum number of goals for this game. If a time is specified the first criteria which is true will stop the match.
	MaxGoals *int64 `json:"max_goals,omitempty"`

	// The maximum tim in sec for this game. If a max goals is specified the first criteria which is true will stop the match.
	MaxTime int64 `json:"max_time,omitempty"`

	// A match can be rated, ie a ranked game with points, or without.
	RatedMatch bool `json:"rated_match,omitempty"`

	// The position of the red users. Not used in 1:1.
	RedAttack []string `json:"red_attack"`

	// The position of the red user playing in defense. This is used when playing 1:1.
	RedDefense []string `json:"red_defense"`

	// the datetime when the game ends
	StartTime string `json:"start_time,omitempty"`

	// Switch the position after 50% of the goal (time or goals) is reached.
	SwitchPosition bool `json:"switch_position,omitempty"`

	// the id of table
	TableID string `json:"table_id,omitempty"`

	// Can be either "red" or "blue"
	Winner string `json:"winner,omitempty"`
}

// Validate validates this match
func (m *Match) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *Match) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Match) UnmarshalBinary(b []byte) error {
	var res Match
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
